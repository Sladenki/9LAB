import tkinter as tk
from tkinter import ttk, messagebox
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
from matplotlib.patches import Rectangle, Polygon
import numpy as np
import math
from rectangle_triangle_perimeter import (
    rectangle_perimeter, triangle_perimeter, 
    triangle_rectangle_intersect
)

class GeometryCalculatorGUI:
    def __init__(self, root):
        self.root = root
        self.root.title("üîß –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ —Ñ–∏–≥—É—Ä - –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ ‚Ññ9")
        self.root.geometry("1200x800")
        self.root.configure(bg='#f0f0f0')
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.rect_vars = {}
        self.tri_vars = {}
        
        self.setup_gui()
        self.setup_plot()
        
    def setup_gui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self.root, bg='#2c3e50', height=80)
        title_frame.pack(fill='x', padx=5, pady=5)
        title_frame.pack_propagate(False)
        
        title_label = tk.Label(title_frame, 
                              text="üéØ –†–ê–°–ß–ï–¢ –û–ë–©–ï–ì–û –ü–ï–†–ò–ú–ï–¢–†–ê –§–ò–ì–£–†", 
                              font=('Arial', 16, 'bold'),
                              bg='#2c3e50', fg='white')
        title_label.pack(expand=True)
        
        subtitle_label = tk.Label(title_frame,
                                 text="–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ü–û - –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ä–∞—Å—á–µ—Ç—ã",
                                 font=('Arial', 10),
                                 bg='#2c3e50', fg='#ecf0f1')
        subtitle_label.pack()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = tk.Frame(self.root, bg='#f0f0f0')
        main_frame.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        left_frame = tk.Frame(main_frame, bg='white', relief='raised', bd=2)
        left_frame.pack(side='left', fill='y', padx=(0, 5))
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –≥—Ä–∞—Ñ–∏–∫
        right_frame = tk.Frame(main_frame, bg='white', relief='raised', bd=2)
        right_frame.pack(side='right', fill='both', expand=True)
        
        self.setup_input_panel(left_frame)
        self.setup_plot_panel(right_frame)
        
    def setup_input_panel(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–∞–Ω–µ–ª–∏
        input_title = tk.Label(parent, text="üìã –í–í–û–î –ö–û–û–†–î–ò–ù–ê–¢", 
                              font=('Arial', 14, 'bold'),
                              bg='white', fg='#2c3e50')
        input_title.pack(pady=10)
        
        # –°–µ–∫—Ü–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        rect_frame = tk.LabelFrame(parent, text="üìê –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫", 
                                  font=('Arial', 12, 'bold'),
                                  bg='white', fg='#3498db',
                                  padx=10, pady=10)
        rect_frame.pack(fill='x', padx=10, pady=5)
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        rect_labels = [
            ("x1 (–ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π):", "rect_x1", "0"),
            ("y1 (–ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π):", "rect_y1", "0"), 
            ("x2 (–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π):", "rect_x2", "4"),
            ("y2 (–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π):", "rect_y2", "3")
        ]
        
        for i, (label, var_name, default) in enumerate(rect_labels):
            tk.Label(rect_frame, text=label, bg='white').grid(row=i, column=0, sticky='w', pady=2)
            var = tk.StringVar(value=default)
            self.rect_vars[var_name] = var
            entry = tk.Entry(rect_frame, textvariable=var, width=10)
            entry.grid(row=i, column=1, padx=(5, 0), pady=2)
            entry.bind('<KeyRelease>', self.on_data_change)
        
        # –°–µ–∫—Ü–∏—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        tri_frame = tk.LabelFrame(parent, text="üìê –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫", 
                                 font=('Arial', 12, 'bold'),
                                 bg='white', fg='#e74c3c',
                                 padx=10, pady=10)
        tri_frame.pack(fill='x', padx=10, pady=5)
        
        # –ü–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        tri_labels = [
            ("x –ø—Ä—è–º–æ–≥–æ —É–≥–ª–∞:", "tri_x0", "1"),
            ("y –ø—Ä—è–º–æ–≥–æ —É–≥–ª–∞:", "tri_y0", "1"),
            ("x –∫–æ–Ω—Ü–∞ 1-–≥–æ –∫–∞—Ç–µ—Ç–∞:", "tri_x1", "3"),
            ("y –∫–æ–Ω—Ü–∞ 2-–≥–æ –∫–∞—Ç–µ—Ç–∞:", "tri_y1", "3")
        ]
        
        for i, (label, var_name, default) in enumerate(tri_labels):
            tk.Label(tri_frame, text=label, bg='white').grid(row=i, column=0, sticky='w', pady=2)
            var = tk.StringVar(value=default)
            self.tri_vars[var_name] = var
            entry = tk.Entry(tri_frame, textvariable=var, width=10)
            entry.grid(row=i, column=1, padx=(5, 0), pady=2)
            entry.bind('<KeyRelease>', self.on_data_change)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = tk.Frame(parent, bg='white')
        button_frame.pack(fill='x', padx=10, pady=10)
        
        calc_button = tk.Button(button_frame, text="üîÑ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å", 
                               command=self.calculate_and_plot,
                               bg='#27ae60', fg='white', 
                               font=('Arial', 10, 'bold'),
                               relief='raised', bd=3)
        calc_button.pack(fill='x', pady=2)
        
        clear_button = tk.Button(button_frame, text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", 
                                command=self.clear_data,
                                bg='#e67e22', fg='white',
                                font=('Arial', 10, 'bold'),
                                relief='raised', bd=3)
        clear_button.pack(fill='x', pady=2)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.results_frame = tk.LabelFrame(parent, text="üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´", 
                                          font=('Arial', 12, 'bold'),
                                          bg='white', fg='#8e44ad',
                                          padx=10, pady=10)
        self.results_frame.pack(fill='x', padx=10, pady=5)
        
        self.result_text = tk.Text(self.results_frame, height=10, width=30,
                                  font=('Courier', 9),
                                  bg='#ecf0f1', fg='#2c3e50',
                                  relief='sunken', bd=2)
        self.result_text.pack(fill='both', expand=True)
        
    def setup_plot_panel(self, parent):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º"""
        plot_title = tk.Label(parent, text="üìà –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø –§–ò–ì–£–†", 
                             font=('Arial', 14, 'bold'),
                             bg='white', fg='#2c3e50')
        plot_title.pack(pady=10)
        
        # –°–æ–∑–¥–∞–µ–º matplotlib —Ñ–∏–≥—É—Ä—É
        self.fig, self.ax = plt.subplots(figsize=(8, 6))
        self.fig.patch.set_facecolor('white')
        
        self.canvas = FigureCanvasTkAgg(self.fig, parent)
        self.canvas.get_tk_widget().pack(fill='both', expand=True, padx=10, pady=10)
        
    def setup_plot(self):
        """–ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞"""
        self.ax.set_xlim(-1, 6)
        self.ax.set_ylim(-1, 5)
        self.ax.set_xlabel('X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞', fontsize=12)
        self.ax.set_ylabel('Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞', fontsize=12)
        self.ax.grid(True, alpha=0.3)
        self.ax.set_aspect('equal')
        self.ax.set_title('–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫', fontsize=14, fontweight='bold')
        
        # –ù–∞—á–∞–ª—å–Ω—ã–π —Ä–∞—Å—á–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.calculate_and_plot()
        
    def get_rectangle_coords(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞"""
        try:
            x1 = float(self.rect_vars['rect_x1'].get())
            y1 = float(self.rect_vars['rect_y1'].get())
            x2 = float(self.rect_vars['rect_x2'].get())
            y2 = float(self.rect_vars['rect_y2'].get())
            
            # –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
            if x1 > x2:
                x1, x2 = x2, x1
            if y1 > y2:
                y1, y2 = y2, y1
                
            return (x1, y1, x2, y2)
        except ValueError:
            return None
            
    def get_triangle_coords(self):
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞"""
        try:
            x0 = float(self.tri_vars['tri_x0'].get())  # –ø—Ä—è–º–æ–π —É–≥–æ–ª
            y0 = float(self.tri_vars['tri_y0'].get())
            x1 = float(self.tri_vars['tri_x1'].get())  # –∫–æ–Ω–µ—Ü –ø–µ—Ä–≤–æ–≥–æ –∫–∞—Ç–µ—Ç–∞
            y1 = float(self.tri_vars['tri_y1'].get())  # –∫–æ–Ω–µ—Ü –≤—Ç–æ—Ä–æ–≥–æ –∫–∞—Ç–µ—Ç–∞
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫: –ø—Ä—è–º–æ–π —É–≥–æ–ª + –¥–≤–∞ –∫–æ–Ω—Ü–∞ –∫–∞—Ç–µ—Ç–æ–≤
            return ((x0, y0), (x1, y0), (x0, y1))
        except ValueError:
            return None
    
    def calculate_and_plot(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        rectangle = self.get_rectangle_coords()
        triangle = self.get_triangle_coords()
        
        if rectangle is None or triangle is None:
            self.show_error("–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö!")
            return
            
        # –û—á–∏—â–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
        self.ax.clear()
        self.setup_plot_appearance()
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–∏–≥—É—Ä—ã
        self.plot_rectangle(rectangle)
        self.plot_triangle(triangle)
        
        # –†–∞—Å—á–µ—Ç—ã
        intersect = triangle_rectangle_intersect(triangle, rectangle)
        rect_p = rectangle_perimeter(*rectangle)
        tri_p = triangle_perimeter(triangle)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.update_results(rectangle, triangle, intersect, rect_p, tri_p)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–∞—Å—à—Ç–∞–± –≥—Ä–∞—Ñ–∏–∫–∞
        self.adjust_plot_limits(rectangle, triangle)
        
        self.canvas.draw()
        
    def setup_plot_appearance(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞"""
        self.ax.set_xlabel('X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞', fontsize=12)
        self.ax.set_ylabel('Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞', fontsize=12)
        self.ax.grid(True, alpha=0.3, linestyle='--')
        self.ax.set_aspect('equal')
        
    def plot_rectangle(self, rectangle):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞"""
        x1, y1, x2, y2 = rectangle
        width = x2 - x1
        height = y2 - y1
        
        rect = Rectangle((x1, y1), width, height, 
                        linewidth=3, edgecolor='#3498db', 
                        facecolor='#3498db', alpha=0.3,
                        label=f'–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫\n–ü–µ—Ä–∏–º–µ—Ç—Ä: {rectangle_perimeter(*rectangle):.2f}')
        self.ax.add_patch(rect)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–≥–ª–æ–≤
        corners = [(x1, y1), (x2, y1), (x2, y2), (x1, y2)]
        for i, (x, y) in enumerate(corners):
            self.ax.plot(x, y, 'o', color='#2980b9', markersize=8)
            self.ax.annotate(f'({x},{y})', (x, y), xytext=(5, 5), 
                           textcoords='offset points', fontsize=8,
                           bbox=dict(boxstyle='round,pad=0.3', facecolor='white', alpha=0.7))
    
    def plot_triangle(self, triangle):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞"""
        tri_array = np.array(triangle)
        
        triangle_patch = Polygon(tri_array, 
                               linewidth=3, edgecolor='#e74c3c',
                               facecolor='#e74c3c', alpha=0.3,
                               label=f'–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫\n–ü–µ—Ä–∏–º–µ—Ç—Ä: {triangle_perimeter(triangle):.2f}')
        self.ax.add_patch(triangle_patch)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–µ—Ä—à–∏–Ω
        for i, (x, y) in enumerate(triangle):
            self.ax.plot(x, y, 's', color='#c0392b', markersize=8)
            labels = ['–ü—Ä—è–º–æ–π —É–≥–æ–ª', '1-–π –∫–∞—Ç–µ—Ç', '2-–π –∫–∞—Ç–µ—Ç']
            self.ax.annotate(f'{labels[i]}\n({x},{y})', (x, y), xytext=(5, -15), 
                           textcoords='offset points', fontsize=8,
                           bbox=dict(boxstyle='round,pad=0.3', facecolor='yellow', alpha=0.7))
    
    def adjust_plot_limits(self, rectangle, triangle):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Å—à—Ç–∞–±–∞ –≥—Ä–∞—Ñ–∏–∫–∞"""
        all_x = [rectangle[0], rectangle[2]] + [p[0] for p in triangle]
        all_y = [rectangle[1], rectangle[3]] + [p[1] for p in triangle]
        
        margin = 1
        self.ax.set_xlim(min(all_x) - margin, max(all_x) + margin)
        self.ax.set_ylim(min(all_y) - margin, max(all_y) + margin)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É
        self.ax.legend(loc='upper right', bbox_to_anchor=(1, 1))
        
    def update_results(self, rectangle, triangle, intersect, rect_p, tri_p):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞—Å—á–µ—Ç–∞"""
        self.result_text.delete(1.0, tk.END)
        
        result = f"""
üîç –ê–ù–ê–õ–ò–ó –§–ò–ì–£–†:

üìê –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫:
   –û—Ç ({rectangle[0]:.1f}, {rectangle[1]:.1f})
   –î–æ ({rectangle[2]:.1f}, {rectangle[3]:.1f})
   –†–∞–∑–º–µ—Ä—ã: {abs(rectangle[2]-rectangle[0]):.1f} √ó {abs(rectangle[3]-rectangle[1]):.1f}
   –ü–µ—Ä–∏–º–µ—Ç—Ä: {rect_p:.2f}

üî∫ –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫:
   –í–µ—Ä—à–∏–Ω—ã: {triangle[0]}, {triangle[1]}, {triangle[2]}
   –ü–µ—Ä–∏–º–µ—Ç—Ä: {tri_p:.2f}

üéØ –†–ï–ó–£–õ–¨–¢–ê–¢:
   –ü–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è: {"‚úÖ –î–ê" if intersect else "‚ùå –ù–ï–¢"}
   
   {f"üéâ –û–±—â–∏–π –ø–µ—Ä–∏–º–µ—Ç—Ä: {rect_p + tri_p:.2f}" if intersect else "‚ö†Ô∏è –û–±—â–∏–π –ø–µ—Ä–∏–º–µ—Ç—Ä –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"}

üìã –ö–∞—Ç–µ—Ç—ã —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞:
   ‚Ä¢ –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π: {abs(triangle[1][0] - triangle[0][0]):.2f}
   ‚Ä¢ –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π: {abs(triangle[2][1] - triangle[0][1]):.2f}
   ‚Ä¢ –ì–∏–ø–æ—Ç–µ–Ω—É–∑–∞: {math.sqrt((triangle[1][0] - triangle[2][0])**2 + (triangle[1][1] - triangle[2][1])**2):.2f}
"""
        
        self.result_text.insert(1.0, result)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        title_color = '#27ae60' if intersect else '#e74c3c'
        title_text = "‚úÖ –§–ò–ì–£–†–´ –ü–ï–†–ï–°–ï–ö–ê–Æ–¢–°–Ø" if intersect else "‚ùå –§–ò–ì–£–†–´ –ù–ï –ü–ï–†–ï–°–ï–ö–ê–Æ–¢–°–Ø"
        self.ax.set_title(title_text, fontsize=14, fontweight='bold', color=title_color)
        
    def on_data_change(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Å—á–µ—Ç"""
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
        self.root.after(500, self.calculate_and_plot)
        
    def clear_data(self):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –ø–æ–ª–µ–π"""
        defaults = {
            'rect_x1': '0', 'rect_y1': '0', 'rect_x2': '4', 'rect_y2': '3',
            'tri_x0': '1', 'tri_y0': '1', 'tri_x1': '3', 'tri_y1': '3'
        }
        
        for var_name, default in defaults.items():
            if var_name in self.rect_vars:
                self.rect_vars[var_name].set(default)
            if var_name in self.tri_vars:
                self.tri_vars[var_name].set(default)
                
        self.calculate_and_plot()
        
    def show_error(self, message):
        """–ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        messagebox.showerror("–û—à–∏–±–∫–∞", message)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ GUI"""
    root = tk.Tk()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è
    style = ttk.Style()
    style.theme_use('clam')
    
    app = GeometryCalculatorGUI(root)
    
    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
    root.update_idletasks()
    x = (root.winfo_screenwidth() // 2) - (1200 // 2)
    y = (root.winfo_screenheight() // 2) - (800 // 2)
    root.geometry(f"1200x800+{x}+{y}")
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    print("üí° –ò–∑–º–µ–Ω–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏ –Ω–∞–±–ª—é–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!")
    
    root.mainloop()

if __name__ == "__main__":
    main() 