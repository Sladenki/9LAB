#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–µ—Ç–≤–µ–π –ø–æ—Ç–æ–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã ‚Ññ9
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –ø–æ–ª–µ 600x600, –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ—Ç -200 –¥–æ 200, —Ü–µ–Ω—Ç—Ä –≤ —Ü–µ–Ω—Ç—Ä–µ
"""

import unittest
import sys
import os
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from rectangle_triangle_perimeter import (
    rectangle_perimeter, triangle_perimeter,
    triangle_rectangle_intersect, point_in_rectangle,
    point_in_triangle, segments_intersect
)

class TestAllBranches(unittest.TestCase):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤–µ—Ç–≤–µ–π –≥—Ä–∞—Ñ–∞ –ø–æ—Ç–æ–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º"""
        self.test_counter = 0
        
    def create_test_visualization(self, rectangle, triangle, test_name, intersects, test_num):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∞ 600x600"""
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å—Ç—Ä–æ–≥–æ 600x600 –ø–∏–∫—Å–µ–ª–µ–π
        fig, ax = plt.subplots(figsize=(6, 6), dpi=100)
        fig.patch.set_facecolor('white')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: -200 –¥–æ 200, —Ü–µ–Ω—Ç—Ä –≤ —Ü–µ–Ω—Ç—Ä–µ
        ax.set_xlim(-200, 200)
        ax.set_ylim(-200, 200)
        ax.set_xlabel('X –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞', fontsize=10)
        ax.set_ylabel('Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞', fontsize=10)
        ax.grid(True, alpha=0.3, linestyle='--')
        ax.set_aspect('equal')
        
        # –û—Å–∏ —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä
        ax.axhline(y=0, color='black', linewidth=0.8, alpha=0.8)
        ax.axvline(x=0, color='black', linewidth=0.8, alpha=0.8)
        
        # –ì—Ä–∞–¥–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 50 –µ–¥–∏–Ω–∏—Ü
        major_ticks = np.arange(-200, 201, 50)
        ax.set_xticks(major_ticks)
        ax.set_yticks(major_ticks)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        x1, y1, x2, y2 = rectangle
        width = x2 - x1
        height = y2 - y1
        rect_color = '#3498db' if intersects else '#95a5a6'
        rect = patches.Rectangle((x1, y1), width, height,
                               linewidth=2, edgecolor=rect_color,
                               facecolor=rect_color, alpha=0.4,
                               label=f'–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ {width:.1f}√ó{height:.1f}')
        ax.add_patch(rect)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        tri_color = '#e67e22' if intersects else '#95a5a6'
        tri_array = np.array(triangle)
        triangle_patch = patches.Polygon(tri_array,
                                       linewidth=2, edgecolor=tri_color,
                                       facecolor=tri_color, alpha=0.4,
                                       label='–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫')
        ax.add_patch(triangle_patch)
        
        # –¢–æ—á–∫–∏ –≤–µ—Ä—à–∏–Ω
        corners = [(x1, y1), (x2, y1), (x2, y2), (x1, y2)]
        for x, y in corners:
            ax.plot(x, y, 'o', color='#2980b9', markersize=4)
        
        for x, y in triangle:
            ax.plot(x, y, 's', color='#d35400', markersize=4)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –ª–µ–≥–µ–Ω–¥–∞
        status = "–ü–ï–†–ï–°–ï–ö–ê–Æ–¢–°–Ø" if intersects else "–ù–ï –ü–ï–†–ï–°–ï–ö–ê–Æ–¢–°–Ø"
        color = '#27ae60' if intersects else '#e74c3c'
        ax.set_title(f"–¢–ï–°–¢ {test_num}: {test_name}\n{status}",
                    fontsize=11, fontweight='bold', color=color)
        ax.legend(loc='upper right', fontsize=9)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        filename = f"test_{test_num:02d}_{test_name.replace(' ', '_').replace(':', '')}.png"
        plt.tight_layout()
        plt.savefig(filename, dpi=100, bbox_inches='tight')
        plt.close()
        
        print(f"üìä –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return filename
    
    def test_01_intersecting_standard(self):
        """–í–ï–¢–í–¨ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ñ–∏–≥—É—Ä"""
        rectangle = (-50, -30, 50, 30)
        triangle = ((-25, -15), (25, -15), (-25, 15))
        
        result = triangle_rectangle_intersect(triangle, rectangle)
        
        self.assertTrue(result, "–§–∏–≥—É—Ä—ã –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è")
        
        # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è
        self.create_test_visualization(rectangle, triangle, 
                                     "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ", result, 1)
        
        print("‚úÖ –¢–ï–°–¢ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ - –ü–†–û–ô–î–ï–ù")
    
    def test_02_no_intersection_far_apart(self):
        """–í–ï–¢–í–¨ 2: –§–∏–≥—É—Ä—ã –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è - –¥–∞–ª–µ–∫–æ –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞"""
        rectangle = (-100, -50, -20, 20)
        triangle = ((50, 30), (80, 30), (50, 60))
        
        result = triangle_rectangle_intersect(triangle, rectangle)
        
        self.assertFalse(result, "–§–∏–≥—É—Ä—ã –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è")
        
        # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è
        self.create_test_visualization(rectangle, triangle,
                                     "–î–∞–ª–µ–∫–æ –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞", result, 2)
        
        print("‚úÖ –¢–ï–°–¢ 2: –§–∏–≥—É—Ä—ã –¥–∞–ª–µ–∫–æ - –ü–†–û–ô–î–ï–ù")
    
    def test_03_touching_boundary(self):
        """–í–ï–¢–í–¨ 3: –ì—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ª—É—á–∞–π - —Ñ–∏–≥—É—Ä—ã –∫–∞—Å–∞—é—Ç—Å—è"""
        rectangle = (-60, -40, 0, 40)
        triangle = ((0, -20), (40, -20), (0, 20))
        
        result = triangle_rectangle_intersect(triangle, rectangle)
        
        self.assertTrue(result, "–ö–∞—Å–∞—é—â–∏–µ—Å—è —Ñ–∏–≥—É—Ä—ã –¥–æ–ª–∂–Ω—ã —Å—á–∏—Ç–∞—Ç—å—Å—è –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–º–∏—Å—è")
        
        # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è
        self.create_test_visualization(rectangle, triangle,
                                     "–ì—Ä–∞–Ω–∏—á–Ω–æ–µ –∫–∞—Å–∞–Ω–∏–µ", result, 3)
        
        print("‚úÖ –¢–ï–°–¢ 3: –ì—Ä–∞–Ω–∏—á–Ω–æ–µ –∫–∞—Å–∞–Ω–∏–µ - –ü–†–û–ô–î–ï–ù")
    
    def test_04_boundary_values_max_range(self):
        """–í–ï–¢–í–¨ 4: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–ª—è"""
        rectangle = (-200, -200, -100, -100)
        triangle = ((100, 100), (200, 100), (100, 200))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≥—Ä–∞–Ω–∏—Ü–∞—Ö
        all_coords = [-200, -200, -100, -100, 100, 100, 200, 100, 100, 200]
        for coord in all_coords:
            self.assertTrue(-200 <= coord <= 200, f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ {coord} –≤–Ω–µ –≥—Ä–∞–Ω–∏—Ü –ø–æ–ª—è")
        
        result = triangle_rectangle_intersect(triangle, rectangle)
        
        self.assertFalse(result, "–§–∏–≥—É—Ä—ã –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–∞—Ö –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è")
        
        # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è
        self.create_test_visualization(rectangle, triangle,
                                     "–ì—Ä–∞–Ω–∏—Ü—ã –ø–æ–ª—è", result, 4)
        
        print("‚úÖ –¢–ï–°–¢ 4: –ì—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è - –ü–†–û–ô–î–ï–ù")
    
    def test_05_zero_coordinates_center(self):
        """–í–ï–¢–í–¨ 5: –ù—É–ª–µ–≤—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã - —Ü–µ–Ω—Ç—Ä —Å–∏—Å—Ç–µ–º—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç"""
        rectangle = (-20, -20, 20, 20)
        triangle = ((0, 0), (30, 0), (0, 30))
        
        result = triangle_rectangle_intersect(triangle, rectangle)
        
        self.assertTrue(result, "–§–∏–≥—É—Ä—ã —á–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä –¥–æ–ª–∂–Ω—ã –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è")
        
        # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è
        self.create_test_visualization(rectangle, triangle,
                                     "–ß–µ—Ä–µ–∑ —Ü–µ–Ω—Ç—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç", result, 5)
        
        print("‚úÖ –¢–ï–°–¢ 5: –¶–µ–Ω—Ç—Ä –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç - –ü–†–û–ô–î–ï–ù")
    
    def test_06_triangle_inside_rectangle(self):
        """–í–ï–¢–í–¨ 6: –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–Ω—É—Ç—Ä–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞"""
        rectangle = (-80, -80, 80, 80)
        triangle = ((-20, -20), (20, -20), (-20, 20))
        
        result = triangle_rectangle_intersect(triangle, rectangle)
        
        self.assertTrue(result, "–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –≤–Ω—É—Ç—Ä–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –≤—Å–µ –≤–µ—Ä—à–∏–Ω—ã —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –≤–Ω—É—Ç—Ä–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        for point in triangle:
            self.assertTrue(point_in_rectangle(point, rectangle),
                          f"–¢–æ—á–∫–∞ {point} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–Ω—É—Ç—Ä–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞")
        
        # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è
        self.create_test_visualization(rectangle, triangle,
                                     "–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –≤–Ω—É—Ç—Ä–∏", result, 6)
        
        print("‚úÖ –¢–ï–°–¢ 6: –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –≤–Ω—É—Ç—Ä–∏ - –ü–†–û–ô–î–ï–ù")
    
    def test_07_rectangle_inside_triangle(self):
        """–í–ï–¢–í–¨ 7: –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞"""
        rectangle = (-10, -10, 10, 10)
        triangle = ((-50, -50), (50, -50), (-50, 50))
        
        result = triangle_rectangle_intersect(triangle, rectangle)
        
        self.assertTrue(result, "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –≤—Å–µ —É–≥–ª—ã –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        corners = [(-10, -10), (10, -10), (10, 10), (-10, 10)]
        for corner in corners:
            self.assertTrue(point_in_triangle(corner, triangle),
                          f"–£–≥–æ–ª {corner} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞")
        
        # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è
        self.create_test_visualization(rectangle, triangle,
                                     "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤–Ω—É—Ç—Ä–∏", result, 7)
        
        print("‚úÖ –¢–ï–°–¢ 7: –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –≤–Ω—É—Ç—Ä–∏ - –ü–†–û–ô–î–ï–ù")
    
    def test_08_degenerate_line_rectangle(self):
        """–í–ï–¢–í–¨ 8: –í—ã—Ä–æ–∂–¥–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π - –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –∫–∞–∫ –ª–∏–Ω–∏—è"""
        rectangle = (0, -30, 0, 30)  # –í—ã—Ä–æ–∂–¥–µ–Ω–Ω—ã–π –≤ –ª–∏–Ω–∏—é
        triangle = ((-20, -10), (20, -10), (-20, 10))
        
        result = triangle_rectangle_intersect(triangle, rectangle)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–ª–≥–æ—Ä–∏—Ç–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ä–æ–∂–¥–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π
        self.assertTrue(result, "–õ–∏–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ—Å–µ–∫–∞—Ç—å—Å—è —Å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–º")
        
        # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è
        self.create_test_visualization(rectangle, triangle,
                                     "–í—ã—Ä–æ–∂–¥–µ–Ω–Ω–∞—è –ª–∏–Ω–∏—è", result, 8)
        
        print("‚úÖ –¢–ï–°–¢ 8: –í—ã—Ä–æ–∂–¥–µ–Ω–Ω—ã–π —Å–ª—É—á–∞–π - –ü–†–û–ô–î–ï–ù")
    
    def test_09_edge_intersection_only(self):
        """–í–ï–¢–í–¨ 9: –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø–æ —Ä–µ–±—Ä–∞–º"""
        rectangle = (-40, -40, 40, -20)
        triangle = ((-30, -20), (30, -20), (-30, 0))
        
        result = triangle_rectangle_intersect(triangle, rectangle)
        
        self.assertTrue(result, "–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –ø–æ —Ä–µ–±—Ä—É –¥–æ–ª–∂–Ω–æ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        
        # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è
        self.create_test_visualization(rectangle, triangle,
                                     "–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ä–µ–±–µ—Ä", result, 9)
        
        print("‚úÖ –¢–ï–°–¢ 9: –ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Ä–µ–±–µ—Ä - –ü–†–û–ô–î–ï–ù")
    
    def test_10_negative_coordinates_boundary(self):
        """–í–ï–¢–í–¨ 10: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ"""
        rectangle = (-200, -200, -150, -150)
        triangle = ((-175, -175), (-125, -175), (-175, -125))
        
        result = triangle_rectangle_intersect(triangle, rectangle)
        
        self.assertTrue(result, "–ü–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        self.assertEqual(rectangle[0], -200, "–õ–µ–≤–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å -200")
        self.assertEqual(rectangle[1], -200, "–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å -200")
        
        # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è
        self.create_test_visualization(rectangle, triangle,
                                     "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã", result, 10)
        
        print("‚úÖ –¢–ï–°–¢ 10: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã - –ü–†–û–ô–î–ï–ù")
    
    def test_11_perimeter_calculations(self):
        """–í–ï–¢–í–¨ 11: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–µ—Ä–∏–º–µ—Ç—Ä–æ–≤"""
        rectangle = (-30, -20, 30, 20)
        triangle = ((-15, -10), (15, -10), (-15, 10))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        rect_p = rectangle_perimeter(*rectangle)
        expected_rect_p = 2 * (60 + 40)  # 2 * (—à–∏—Ä–∏–Ω–∞ + –≤—ã—Å–æ—Ç–∞)
        self.assertEqual(rect_p, expected_rect_p, "–ü–µ—Ä–∏–º–µ—Ç—Ä –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–µ–≤–µ—Ä–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—á–µ—Ç –ø–µ—Ä–∏–º–µ—Ç—Ä–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        tri_p = triangle_perimeter(triangle)
        # –ö–∞—Ç–µ—Ç—ã: 30 –∏ 20, –≥–∏–ø–æ—Ç–µ–Ω—É–∑–∞: sqrt(30¬≤ + 20¬≤) ‚âà 36.06
        expected_tri_p = 30 + 20 + (30**2 + 20**2)**0.5
        self.assertAlmostEqual(tri_p, expected_tri_p, places=2, 
                              msg="–ü–µ—Ä–∏–º–µ—Ç—Ä —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –Ω–µ–≤–µ—Ä–µ–Ω")
        
        # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è
        result = triangle_rectangle_intersect(triangle, rectangle)
        self.create_test_visualization(rectangle, triangle,
                                     "–†–∞—Å—á–µ—Ç –ø–µ—Ä–∏–º–µ—Ç—Ä–æ–≤", result, 11)
        
        print(f"‚úÖ –¢–ï–°–¢ 11: –ü–µ—Ä–∏–º–µ—Ç—Ä—ã - –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫: {rect_p}, —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫: {tri_p:.2f}")
    
    def test_12_segments_intersection_logic(self):
        """–í–ï–¢–í–¨ 12: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –æ—Ç—Ä–µ–∑–∫–æ–≤"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é segments_intersect
        
        # –ü–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –æ—Ç—Ä–µ–∑–∫–∏
        self.assertTrue(segments_intersect(0, 0, 10, 10, 5, 0, 5, 10),
                       "–ü–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –æ—Ç—Ä–µ–∑–∫–∏ –Ω–µ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã")
        
        # –ù–µ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –æ—Ç—Ä–µ–∑–∫–∏
        self.assertFalse(segments_intersect(0, 0, 5, 5, 10, 10, 15, 15),
                        "–ù–µ–ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è –æ—Ç—Ä–µ–∑–∫–∏ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è")
        
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ—Ç—Ä–µ–∑–∫–∏
        self.assertFalse(segments_intersect(0, 0, 10, 0, 0, 5, 10, 5),
                        "–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –æ—Ç—Ä–µ–∑–∫–∏ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–∏–µ—Å—è")
        
        print("‚úÖ –¢–ï–°–¢ 12: –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –æ—Ç—Ä–µ–∑–∫–æ–≤ - –ü–†–û–ô–î–ï–ù")
    
    def test_13_point_in_shapes_logic(self):
        """–í–ï–¢–í–¨ 13: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ —Ç–æ—á–∫–∏ —Ñ–∏–≥—É—Ä–∞–º"""
        rectangle = (-50, -50, 50, 50)
        triangle = ((-30, -30), (30, -30), (-30, 30))
        
        # –¢–æ—á–∫–∏ –≤–Ω—É—Ç—Ä–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        self.assertTrue(point_in_rectangle((0, 0), rectangle),
                       "–¶–µ–Ω—Ç—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–Ω—É—Ç—Ä–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞")
        self.assertFalse(point_in_rectangle((60, 60), rectangle),
                        "–¢–æ—á–∫–∞ –≤–Ω–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ –≤–Ω—É—Ç—Ä–∏")
        
        # –¢–æ—á–∫–∏ –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        self.assertTrue(point_in_triangle((-20, -20), triangle),
                       "–¢–æ—á–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞")
        self.assertFalse(point_in_triangle((20, 20), triangle),
                        "–¢–æ—á–∫–∞ –≤–Ω–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ –≤–Ω—É—Ç—Ä–∏")
        
        print("‚úÖ –¢–ï–°–¢ 13: –ü—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å —Ç–æ—á–∫–∏ - –ü–†–û–ô–î–ï–ù")
    
    def run_all_branch_tests(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –≤–µ—Ç–≤–µ–π"""
        print("\n" + "="*60)
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –í–ï–¢–í–ï–ô –ü–û–¢–û–ö–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø")
        print("üìè –ü–æ–ª–µ: 600√ó600 –ø–∏–∫—Å–µ–ª–µ–π")
        print("üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: –æ—Ç -200 –¥–æ 200")
        print("üìä –¶–µ–Ω—Ç—Ä: –≤ —Ü–µ–Ω—Ç—Ä–µ –ø–æ–ª—è")
        print("="*60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
        test_methods = [method for method in dir(self) if method.startswith('test_')]
        
        passed = 0
        failed = 0
        
        for test_method in sorted(test_methods):
            try:
                print(f"\nüîç –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: {test_method}")
                getattr(self, test_method)()
                passed += 1
            except Exception as e:
                print(f"‚ùå –û–®–ò–ë–ö–ê –≤ {test_method}: {e}")
                failed += 1
        
        print(f"\n" + "="*60)
        print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
        print(f"   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: {failed}")
        print(f"   üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {passed/(passed+failed)*100:.1f}%")
        print("="*60)
        
        return passed, failed

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    tester = TestAllBranches()
    tester.run_all_branch_tests()

if __name__ == "__main__":
    main() 